分片可以理解为集群中的一个实例
Spring eureka 作为微服务治理的注册中心 可以在每一个可用区域内部署一个 形成eureka集群

java -jar eureka-server-1.0.0.jar --spring.profiles.active=peerl 
用于说明项目启动时用的配置文件是哪个 多配置文件  application-peerl.properties

Ribbon 的默认策略会优先访问同客户端处于一个 Zone 中的服
务端实例，只有当同一个 Zone 中没有可用服务端实例的时候才会访问其他 Zone 中的实例。
所以通过 Zone 属性的定义，配合实际部署的物理结构，我们就可以有效地设计出对区域性
故障的容错集群。

标记可以加在包、类，属性、方法，方法的参数以及局部变量上。

注解 @Deprecated 表示是过时的
@Retention(RetentionPolicy.RUNTIME) //Retention注解决定MyAnnotation注解的生命周期
@Target( { ElementType.METHOD, ElementType.TYPE }) //Target注解决定MyAnnotation注解可以加在哪些成分上，如加在类身上，或者属性身上，或者方法身上等成分
如果一个注解中有一个名称为value的属性，且你只想设置value属性(即其他属性都采用默认值或者你只有一个value属性)，那么可以省略掉“value=”部分。


Spring 
  SpringBoot中CommandLineRunner的作用
> 平常开发中有可能需要实现在项目启动后执行的功能，
SpringBoot提供的一种简单的实现方案就是添加一个model并实现CommandLineRunner接口，
实现功能的代码放在实现的run方法中 https://www.cnblogs.com/myblogs-miller/p/9046425.html


脏读 一个事物在操作数据的时候还没提交 其他事物来读取数据 等上一个事务提交了 就会造成脏读 加上写锁
不可重复读 一个事物在读了数据 另一个事务修改了数据 原来的事物再次读数据 会造成前后数据不一致 不可重复读 加上写锁
幻读 一个事务修改了数据 另一个事务再次修改该数据 导致该数据像没修改一样 造成幻读


通过 jdbc 的 api 手动提交事务：
开启事务 : conn.setAutoCommit(false);
提交事务 : conn.commit();
回滚事务 : conn.rollback();

3888691
使用代理的有 SpringAop 事务 mapper的实现

vs code 代码格式化整理 Shift + Alt + F

Futre

RxJava

MinGW64 或者 Cygwin
java  常用注解 confige相关
@Configuration 表明当前类是一个配置类
@importResource 将配置文件的信息注入进来
@ComponentScan  主要就是定义扫描的路径从中找出标识了需要装配的类自动装配到spring的bean容器中
@Bean 注解到方法上 他的返回可以作为配置注入到容器当中
@ConfigurationProperties 可以直接将配置文件的信息 注入到一个Bean中
Bean定义相关
@Component @Service @Repository @Controller @RestController @RequestMapping
注入相关的注解
@Autowired(按类型) @Resource(按名字) @Qualifier @Value(配置常量)

JPA注解
@Entity @Table(name) @MappedSuperclass
@Id @GeneratedVale() @SequenceGenerated



mybatis  的 insert 的for循环
<insert id="addMsg2AllHr">
        INSERT INTO sysmsg(mid,hrid) VALUES
        <foreach collection="hrs" item="hr" separator=",">
            (#{mid},#{hr.id})
        </foreach>
    </insert>
	
	
	
文件是否读完
byte[] buffer = new byte[4096];
int n = 0;
while (-1 != (n = input.read(buffer))) {
	output.write(buffer, 0, n);
}
			
while((s = reader.readLine()) != null){
sb.append(s);
sb.append(crlf);
}

in.close();
reader.close();






voliate 原理
使用该关键字
1）将当前处理器缓存行的数据写回到系统内存。
2）这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。
	为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存（L1，L2或其他）后再进行操作，
但操作完不知道何时会写到内存。如果对声明了volatile的 变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据
写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操
作就会有问题。所以，在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一
致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当
处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状
态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存 里。






Spring JPA 学习 
派生查询 deleteBy 和removeBy 都是需要先查询再删除 removeBy需要加上事物 @Modifying 和@Transactional
Page 和 Sort 不能同时出现在一个参数里面




java 中 阻塞队列 非阻塞队列 和普通队列的区别
https://blog.csdn.net/u012881904/article/details/51491736


重写方法的另一种写法
package com.mihao.jdk8;

public class Main {
    public static void main(String[] args) {
        MyImplant myImplant = new MyImplant();
        myImplant.handle(new ParaObj("AAA"));
        MyImplant myImplant1 = new MyImplant(){
            @Override
            public void handle(ParaObj obj) {
                System.out.println("修改的" + obj.getName());
            }
        };
        myImplant1.handle(new ParaObj("BBB"));
    }

    
}

class MyImplant implements MyInterface{

    @Override
    public void handle(ParaObj obj) {
        System.out.println("原始的" + obj.getName());
    }
}



1. Class.getResourceAsStream(String path) ： path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从

ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。

2. Class.getClassLoader.getResourceAsStream(String path) ：默认则是从ClassPath根下获取，path不能以’/'开头，最终是由ClassLoader获取资源。

3. ServletContext. getResourceAsStream(String path)：默认从WebAPP根目录下取资源，Tomcat下path是否以’/'开头无所谓，








